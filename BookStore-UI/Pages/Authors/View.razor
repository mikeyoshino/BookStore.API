@page "/authors/view/{Id}"

@inject IAuthorRepository _repo
@inject NavigationManager _navManager
<h3>View</h3>

@if (Model == null)
{
    <LoadingMessage Message="Loading authors data." />
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.FirstName</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.LastName</td>
            </tr>
            <tr>
                <td>Bio</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
    </div>
    @if (Model.Books == null || Model.Books.Count() < 1)
    {
        <div class="alert alert-dismissible alert-secondary">
            No Book Display for this Authors.
        </div>
    }
    else
    {

        <div class="card" style="width: 18rem;">
            <div class="card-header">
                Authors Books
            </div>
            <ul class="list-group list-group-flush">

                @foreach (var book in Model.Books)
                {
                    <li class="list-group-item">@book.Title - @book.Price</li>
                }
            </ul>
        </div>
    }
    <MatThemeProvider Theme="@theme1">
        <MatButton Outlined="true" @onclick="BackToList" Icon="keyboard_backspace">Back To List</MatButton>
    </MatThemeProvider>
}
@code {
    [Parameter]
    public string Id { get; set; }
    private Author Model = new Author();


    protected async override Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);

    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }

    MatTheme theme1 = new MatTheme()
    {
        Primary = MatThemeColors.Teal._700.Value,
        Secondary = MatThemeColors.Teal.A400.Value

    };
}
