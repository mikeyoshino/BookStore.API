@page "/login"

@using BookStore_UI.Contract
@using BookStore_UI.Models

@inject IAuthenticationRepository _authoRepo
@inject NavigationManager _navManager

<h3>Login</h3>

<div class="card">
    <h3 class="card-title p-5">Register Form</h3>
    @if (!reponse)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with login.</p>
        </div>
    }

    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MatThemeProvider Theme="@theme1">
                <div class="form-group">

                    <MatTextField id="email" @bind-Value="Model.EmailAddress" Label="Email Address" FullWidth="true"></MatTextField>
                    <ValidationMessage For="@(() => Model.EmailAddress)" />


                </div>
                <div class="form-group">
                    <MatTextField id="password" type="password" @bind-Value="Model.Password" Label="Password" FullWidth="true"></MatTextField>
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>

                <MatButton type="submit" Raised="true" Icon="touch_app">Login</MatButton>

            </MatThemeProvider>
        </EditForm>
    </div>
</div>


@code {

    private LoginModel Model = new LoginModel();

    private bool reponse = true;
    private async Task HandleLogin()
    {
        var reponse = await _authoRepo.Login(Model);

        if (reponse)
        {
            _navManager.NavigateTo("/");
        }

    }


    MatTheme theme1 = new MatTheme()
    {
        Primary = MatThemeColors.Amber.A400.Value,
        Secondary = MatThemeColors.Teal.A400.Value
    };

    MatTheme theme2 = new MatTheme()
    {
        Primary = "green",
        Secondary = "orange"
    };



}
