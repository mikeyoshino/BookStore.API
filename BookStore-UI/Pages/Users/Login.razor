@page "/login"


@inject IAuthenticationRepository _authoRepo
@inject NavigationManager _navManager


<h3 class="card-title p-2">Login Page</h3>
@if (!reponse)
{
    <ErrorMessage Message="Something went wrong with login."></ErrorMessage>
}

<div class="card-body p-5">
    <EditForm Model="Model" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <MatThemeProvider Theme="@theme1">
            <div class="form-group">

                <MatTextField id="email" @bind-Value="Model.EmailAddress" Label="Email Address" Icon="@MatIconNames.Account_box" FullWidth="false"></MatTextField>
                <ValidationMessage For="@(() => Model.EmailAddress)" />


            </div>
            <div class="form-group">
                <MatTextField id="password" type="password" @bind-Value="Model.Password" Label="Password" Icon="@MatIconNames.Vpn_key" FullWidth="false"></MatTextField>
                <ValidationMessage For="@(() => Model.Password)" />
            </div>

            <MatButton type="submit" Raised="true" Icon="touch_app">Login</MatButton>
            <MatButton type="submit" Raised="true" Icon="people">Register</MatButton>
        </MatThemeProvider>
    </EditForm>
</div>



@code {

    private LoginModel Model = new LoginModel();

    private bool reponse = true;
    private async Task HandleLogin()
    {
        var reponse = await _authoRepo.Login(Model);

        if (reponse)
        {
            _navManager.NavigateTo("/");
        }

    }


    MatTheme theme1 = new MatTheme()
    {
        Primary = MatThemeColors.Teal._700.Value,
        Secondary = MatThemeColors.Teal.A400.Value

    };




}
